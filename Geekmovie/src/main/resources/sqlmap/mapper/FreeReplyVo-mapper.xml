<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace : package + classname -->
<mapper namespace="freeReplyVo">

	<insert id="insert" parameterType="freeReplyVo">
		<![CDATA[
			insert into freereply(boardId, ancestorId, depth, orderserial, content, writer) 
			values(#{boardId}, #{ancestorId}, #{depth}, #{orderserial}, #{content}, #{writer});
		]]>
	
	</insert>
	
	<select id="boardShow" parameterType="HashMap" resultType="freeReplyVo">
	select replyId, ancestorId, depth, orderserial, content, writer, deleted, create_date, update_date, likes
	from freereply where boardId=#{boardId} order by ancestorId desc, orderserial limit #{start}, #{size}
	</select>
	
	<select id="boardCount" parameterType="int" resultType="int">
	select count(replyId)
	from freereply where boardId=#{boardId};
	</select>
	
	<select id="boardAncestorSet" parameterType="int" resultType="int">
	select ifnull(max(replyId), 0)
	from freereply where boardId=#{boardId} and depth=0;
	</select>
	
	<select id="boardOrderserialfind" parameterType="freeReplyVo" resultType="String">
	select ifnull(max(orderserial), concat(#{orderserial}, '0000'))
	from freereply where boardId=#{boardId} and ancestorId=#{ancestorId} and depth=#{depth} and writer='' and orderserial like concat(#{orderserial},'%');
	</select>
	
	<update id="like_update" parameterType="HashMap">  
	    <![CDATA[  
	        update freereply set  likes = #{likes}
	        where replyId = #{replyId}  ;
		    ]]>  
	</update>
	
	<update id="delete" parameterType="int">
	   <![CDATA[ 
			update freereply set content='', deleted='Y',likes='0' where replyId = #{replyId};
			    ]]>  
	</update>
	
	<select id="childDeleteCheck" parameterType="freeReplyVo">
	   <![CDATA[ 
			select count(replyId) from freereply where boardId=#{boardId} and ancestorId=#{ancestorId} and orderserial like concat(#{orderserial},'%') and deleted='N';
			    ]]>  
	</select>
	
		<delete id="childDelete" parameterType="freeReplyVo">	<!-- 삭제할때 like도 삭제할것 -->
	   <![CDATA[ 
			delete from freereply where boardId=#{boardId} and ancestorId=#{ancestorId} and orderserial like concat(#{orderserial},'%') and deleted='N';	
			    ]]>  
	</delete>
	
	<update id="update" parameterType="freeReplyVo">
				<![CDATA[
			update freereply set content=#{content} where replyId=#{replyId};
			]]>
	</update>
	
	<resultMap type="freeReplyLikeVo" id="freeReplyJoinTarget">
			<result column="freereplyId" property="freereplyId" />
			<result column="userId" property="userId" />
			<!--<result column="mode" property="mode" />-->
	</resultMap>
	
	<resultMap type="freeReplyVo" id="freeReplyJoin">
		<result column="replyId" property="replyId" />
		<result column="boardId" property="boardId" />
		<result column="content" property="content" />
		<result column="writer" property="writer" />
		<result column="create_date" property="create_date" />
		<result column="likes" property="likes" />
		<collection property="freeReplyLikeVo" resultMap="freeReplyJoinTarget"/>
	</resultMap>
	
		<select id="UserReplyLike" parameterType="HashMap" resultMap="freeReplyJoin">
	<![CDATA[
			select a.replyId, a.boardId, a.content ,a.writer, create_date, a.likes
			from freereply as a
			join
			freereplylike as b
			on a.replyId = b.freereplyId
            where b.userId=#{userId}  and b.mode=1 
            order by b.seq DESC limit #{nowPageStart}, #{Size};
		]]>
	</select>
	
			<select id="UserReply" parameterType="HashMap" resultType="freeReplyVo">
	<![CDATA[
			select replyId, boardId, content, create_date, likes
			from freereply where writer=#{writer} and deleted='N' order by replyId desc, orderserial limit #{start}, #{size}
		]]>
	</select>
	
	<select id="ReplyShow" parameterType="HashMap" resultType="int">	<!-- 특정 댓글이 위치한 곳을 반환 -->
	select ranking from (
	select replyId, rank() over(order by ancestorId desc, orderserial) as ranking from freereply where boardId=#{boardId}) a
	where replyId=#{replyId};
	</select>
	
</mapper>
